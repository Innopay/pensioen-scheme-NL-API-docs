openapi: 3.0.0
info:
  title: Reference Datasources
  description: This API reference documentation serves as an example as to how "datasources" can publish the required pensionservices APIs. Datasources MUST follow API url paths as defined in the calls below and add a domain-specific prefix.
  version: 1.0.0
servers:
  - url: https://api.example.com
paths:
  /pensioenservices-scheme/v1.0/token:
    post:
      summary: Retrieve access token
      description: Access to resource endpoints is granted based on access tokens. Each approved and active Scheme participant must be able to request access tokens by using the token endpoint offered by each datasource. To obtain an Access Token the OAuth client credentials type grant flow is used as explained in RFC6749 & RFC7523, parameter naming conventions will follow OAuth standards. As clients may not be pre-registered, the client secret is replaced with a client assertion using the client's certificate. Additionally, the client presents a status token (issued & signed by Scheme Authority) to prove the accepted & active participant status for the client.  
      security: []
      requestBody:
        description: Token request body
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: OAuth 2.0 grant type MUST be set to client_credentials
                  example: client_credentials
                scope:
                  type: string
                  description: The value passed for the scope parameter in this request should be "afsprakenstelsel_pensioenservices" 
                  example: afsprakenstelsel_pensioenservices
                client_id:
                  type: string
                  description: The clientID that's assigned to the organisation requesting access. When accepting a new organisation in the ecosystem, the expected client_id is defined. This should be an organisational identifier that is also present on the authentication certificate used by the client to sign the client_assertion. For NL organisations, the most common clientID is the RSIN number on an eIDAS (QWAC) certificate, usually the organisation's tax number.
                  example: 123456789
                client_assertion_type:
                  type: string
                  description: The value MUST be set to urn:ietf:params:oauth:client-assertion-type:jwt-bearer
                  example: urn:ietf:params:oauth:client-assertion-type:jwt-bearer
                client_assertion:
                  type: string
                  description: An assertion (a JSON web token) that the client will need to create by signing with the certificate they registered as credentials with the Scheme Authority.
                  example: client_assertion
                status_token:
                  type: string
                  description: A token (signed by the Scheme Authority) that proves that the client is an approved and active participant of the pensionservices ecosystem and is authorized to access APIs related to pensionservices scheme.
                  example: status_token
              required:
                - grant_type
                - scope
                - client_id
                - client_assertion_type
                - client_assertion
                - status_token
      responses:
        '200':
           description: OK - Access token Successfully obtained
           content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The access token
                    example: aW2ys9NGE8RjHPZ4mytQivkWJO5HGQCYJ7VyMNGGDLIOw
                  token_type:
                    type: string
                    description: Indicates the token type value. MUST be set to "Bearer". 
                    enum: [Bearer]
                  expires_at:
                    type: integer
                    example: 1714652341
                    description: Expiry time of the access token (formatted in Unix epoch time). MUST be set to issuing timestamp + 3600 seconds. 
                  scope: 
                    type: string
                    example: afsprakenstelsel_pensioenservices  
                    description: Scope of the access token i.e. "afsprakenstelsel_pensioenservices" 
        '400':
          description: Bad request 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Request is missing required parameters or not properly formatted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Invalid client credentials
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Client is not authorized to access requested resource

  /pensioenservices-scheme/v1.0/server-certificate:
    get:
      summary: Retrieve server certificate
      description: Provides the signing certificate (X.509 certificate in base64 encoded PEM format) that is used by the server in the context of the pensionservices data sharing scheme. Can be used for validating the server identity, response signatures or the server's public key can be used to encrypt sensitive data towards the server.
      security: 
        - auth: []
      responses:
        '200':
          description: OK - Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateResponse' 
        '400':
          description: Bad request 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Request is missing required parameters or not properly formatted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Bearer token invalid
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Client is not authorized to access requested resource.
     
  /pensioenservices-scheme/v1.0/deelnemers/consents:
    post:
      summary: Create consent
      description: Provides new collected user consent to server. Server responds with a resource reference ID to be used for further reference to the consent. Resource reference ID must be URL encoded value. Request and response (2xx) MUST be signed using X-Timestamp and X-Signature headers.
      security: 
        - auth: []
      parameters:
        - in: header
          name: Content-type
          schema:
            type: string
          example: application/json
          required: true
          description: application/json
        - in: header
          name: X-Timestamp
          schema:
            type: string
            format: int64
          example: 1717106234
          required: true
          description: timestamp - current time in Unix epoch format 
        - in: header
          name: X-Signature
          schema:
            type: string    
          example: RXhhbXBsZVJlc3BvbnNlU2lnbmF0dXJl
          required: true
          description: Base64 encoded request signature. Created by signing the signature base string (combining HTTP method, URL, body and X-Timestamp header values) using RS256 algorithm, with private key of the client.
      requestBody:
        required: true
        description: describes consent registration data
        content:
          application/json:
            schema:          
              $ref: '#/components/schemas/consentRegistration'

      responses:
        '201':
           description: Consent Successfully created
           headers:
             X-Timestamp:
               $ref: '#/components/headers/X-Timestamp' 
             X-Signature:
               $ref: '#/components/headers/SignatureResponse' 
           content:
            application/json:
              schema:
                type: object
                properties:
                  serverConsentID:
                    type: string
                    description: server resource ID of created consent, to be used for future supported operations by the client (e.g. PATCH)
                    example: serverID.userID.consent123456 
        '400':
          description: Bad request 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Request is missing required parameters or not properly formatted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Bearer token invalid
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Client is not authorized to access requested resource
  /pensioenservices-scheme/v1.0/consents/{serverConsentId}:
    patch:
      summary: Update consent
      description: Send updated data to previously created consent at the server. Only requires the client to send values for attributes in the consentRegistration that are changed. Primarily used for renewing the validity period. Request and response (2xx) MUST be signed using X-Timestamp and X-Signature headers.
      security: 
        - auth: []
      parameters:
        - in: path
          name: serverConsentId
          required: true
          description: contains the consent resource reference ID that is obtained through the server response when creating a new consent resource
          schema: 
            type: string
        - in: header
          name: Content-type
          schema:
            type: string
          example: application/json
          required: true
          description: application/json
        - in: header
          name: X-Timestamp
          schema:
            type: string
            format: int64
          example: 1717106234
          required: true
          description: timestamp - current time in Unix epoch format
        - in: header
          name: X-Signature
          schema:
            type: string    
          example: RXhhbXBsZVJlc3BvbnNlU2lnbmF0dXJl
          required: true
          description: Base64 encoded request signature. Created by signing the signature base string (combining HTTP method, URL, body and X-Timestamp header values) using RS256 algorithm, with private key of the client.
      requestBody:
        required: true
        description: describes consent registration data
        content:
          application/json:
            schema:          
              $ref: '#/components/schemas/consentRegistrationPATCH'
      responses:
        '200':
           description: OK - Consent Successfully updated
           headers:
             X-Timestamp:
               $ref: '#/components/headers/X-Timestamp' 
             X-Signature:
               $ref: '#/components/headers/SignatureResponse'
           content:
            application/json:
              schema:
                type: object
                properties:
                  serverConsentID:
                    type: string
                    description: server resource ID of created consent, to be used for future supported operations by the client (e.g. PATCH)
                    example: serverID.userID.consent123456 
        '400':
          description: Bad request 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Request is missing required parameters or not properly formatted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Bearer token invalid
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Client is not authorized to access requested resource
    delete:
      summary: Delete consent
      description: Delete the specified consent resource from the server. Requires the client to send the serverConsentId to identify the consent resource to be deleted. The request MUST be signed using X-Timestamp and X-Signature headers.
      security: 
        - auth: []
      parameters:
        - in: path
          name: serverConsentId
          required: true
          description: contains the consent resource reference ID that is obtained through the server response when creating a new consent resource
          schema: 
            type: string
        - in: header
          name: X-Timestamp
          schema:
            type: string
            format: int64
          example: 1717106234
          required: true
          description: timestamp - current time in Unix epoch format
        - in: header
          name: X-Signature
          schema:
            type: string    
          example: RXhhbXBsZVJlc3BvbnNlU2lnbmF0dXJl
          required: true
          description: Base64 encoded request signature. Created by signing the signature base string (combining HTTP method, URL, and X-Timestamp header values) using RS256 algorithm, with private key of the client.
      responses:
        '204':
           description: No Content - Consent successfully deleted
        '400':
          description: Bad request 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Request is missing required parameters or not properly formatted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Bearer token invalid
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Client is not authorized to access requested resource
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: The requested consent resource does not exist
  /pensioenservices-scheme/v1.0/deelnemers/userinfo:
    post:
      summary: Retrieve participant personal data
      description: Requests a set of personal data about a specific participant. To prevent logging of Dutch personal identifiers through URL paths, a POST is used with the Dutch personal identifier as part of request body. Each pensionservice has an ID token scope associated with the service to ensure only the relevant specific set of personal data is shared. Only a subset of the example response will be returned based on requested scope. Request and response (2xx) MUST be signed using X-Timestamp and X-Signature headers.
      security: 
          - auth: []
      parameters:
        - in: header
          name: Content-type
          schema:
            type: string
          example: application/json
          required: true
          description: application/json
        - in: header
          name: X-Timestamp
          schema:
            type: string
            format: int64
          example: 1717106234
          required: true
          description: timestamp - current time in Unix epoch format
        - in: header
          name: X-Signature
          schema:
            type: string    
          example: RXhhbXBsZVJlc3BvbnNlU2lnbmF0dXJl
          required: true
          description: Base64 encoded request signature. Created by signing the signature base string (combining HTTP method, URL, body and X-Timestamp header values) using RS256 algorithm, with private key of the client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scope:
                  type: string
                  example: DIVORCE_INFORM
                  description: Describes the data scope that is requested within all personal data of a participant. MUST be one of the pre-defined scopes within the pensionservices scheme. For divorce, these are "DIVORCE_INFORM" and "DIVORCE_CONFIRM".
                serverConsentId:
                  $ref: '#/components/schemas/serverConsentId'
                userInfoParameters:
                  $ref: '#/components/schemas/userInfoParameters'
              required:
                - scope
                - serverConsentId
                - userInfoParameters
      responses:
        '200':
          description: OK - Successful request
          headers:
             X-Timestamp:
               $ref: '#/components/headers/X-Timestamp' 
             X-Signature:
               $ref: '#/components/headers/SignatureResponse'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInfo' 
              examples: 
                DIVORCE_INFORM:
                  summary: Example for scope = DIVORCE_INFORM
                  value:
                    userInfoProfile:
                      aanhef: "Dhr."
                      initialen: "A.B."
                      achternaam: "de Boer"
                      voorkeursnaam: "A.B. de Boer"
                      verwantschapType: "GEHUWD"
                      relatieStart: "2015-03-10"
                      relatieEind: "2023-08-22"
                DIVORCE_CONFIRM:
                  summary: Example for scope = DIVORCE_CONFIRM
                  value:
                    userInfoIdentifier:
                      klantnummer: '1234512344'
                      burgerServiceNummerEncrypted: "M@a7R0$I;"
                    userInfoProfile:
                      aanhef: "Dhr."
                      initialen: "A.B."
                      voornamen: "Jan"
                      achternaam: "de Boer"
                      voorkeursnaam: "A.B. de Boer"
                      gender: "Man"
                      geboortedatum: "1985-02-21"
                      verwantschapType: "GEHUWD"
                      relatieStart: "2015-03-10"
                      relatieEind: "2023-08-22"
                    userInfoAddress:
                      woonadres: "Hoofdweg 21a"
                      woonplaats: "Amsterdam"
                      regio: "Noord-Holland"
                      postcode: "1234AB"
                      land: "Nederland"
                    userInfoContact:
                      emailadres: "jandeboer@emailprovider.com"
                      telefoonnummer: '31612345678'
                      bankrekeningnummer: "NL11RABO011111111"
                    userInfoPensioen:
                      polisnummerRegeling: '1234567890'
                      typeRegeling: "UITKERINGSREGELING"
                      looptijdRegeling: "LEVENSLANG"
                      regelingStartdatum: "2001-01-01"
                      regelingEinddatum: "2008-01-01"
                      deelnemerStatus: "ACTIEF"
                    userInfoPartnerProfile:
                      partnerKlantnummer: '1234512345'
                      aanhef: "Mevr."
                      initialen: "C.D."
                      voornamen: "Marie"
                      achternaam: "van Gevelt"
                      voorkeursnaam: "C.D. van Gevelt"
                      gender: "female"
                      geboortedatum: "1987-08-25"
                    userInfoPartnerAddress:
                      woonadres: "Hoofdweg 21a"
                      woonplaats: "Amsterdam"
                      regio: "Noord-Holland"
                      postcode: "1234AB"
                      land: "Nederland"
                    userInfoPartnerContact:
                      emailadres: "jandeboer@emailprovider.com"
                      telefoonnummer: '31612345678'
                      bankrekeningnummer: "NL11RABO011111111"
        '400':
          description: Bad request 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Request is missing required parameters or not properly formatted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Bearer token invalid
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Client is not authorized to access requested resource
        '422':
          description: Unprocessable Entity
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Geen relatie (huwelijk of reg. partnerschap) bekend bij pensioenfonds

  /pensioenservices-scheme/v1.0/deelnemers/aanspraken:
    post:
      summary: Retrieve divorce calculations
      description: Retrieves specific pension entitlement calculations specifically for divorce pensionservices). Request and response (2xx) MUST be signed using X-Timestamp and X-Signature headers.
      security: 
        - auth: []
      parameters:
        - in: header
          name: Content-type
          schema:
            type: string
          example: application/json
          required: true
          description: application/json
        - in: header
          name: X-Timestamp
          schema:
            type: string
            format: int64
          example: 1717106234
          required: true
          description: timestamp - current time signature creation in Unix epoch format
        - in: header
          name: X-Signature
          schema:
            type: string    
          example: RXhhbXBsZVJlc3BvbnNlU2lnbmF0dXJl
          required: true
          description: Base64 encoded request signature. Created by signing the signature base string (combining HTTP method, URL, body and X-Timestamp header values) using RS256 algorithm, with private key of the client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scope:
                  type: string
                  example: SCHEIDING_BEREKENING
                  description: Describes the data scope that is requested within all entitlement data of a participant. MUST be one of the pre-defined scopes within the pensionservices scheme.
                serverConsentId:
                  $ref: '#/components/schemas/serverConsentId'
                scheidingBerekeningParameters:
                  $ref: '#/components/schemas/scheidingBerekeningParameters'
              required:
                - scope
                - serverConsentId
                - scheidingBerekeningParameters
      responses:
        '200':
          description: OK - Successful request
          headers:
             X-Timestamp:
               $ref: '#/components/headers/X-Timestamp' 
             X-Signature:
               $ref: '#/components/headers/SignatureResponse'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/scheidingBerekeningResultaat'
              examples:
                pensioenOuderdom:
                  $ref: '#/components/examples/pensioenOuderdomExample'
                pensioenTijdelijk:
                  $ref: '#/components/examples/pensioenTijdelijkExample'
                combined:
                  $ref: '#/components/examples/combinedExample'
                afkoopgrens:
                  $ref: '#/components/examples/afkoopgrensExample'
                bijzonderPartnerPensioen:
                  $ref: '#/components/examples/BPPExample'
        '400':
          description: Bad request 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Request is missing required parameters or not properly formatted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Bearer token invalid
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Client is not authorized to access requested resource
        '422':
          description: Unprocessable Entity
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  error_response:
                    type: string
                    description: The server's error response
                    example: Scheidingsberekeningen niet beschikbaar voor deze deelnemer door waardeoverdracht.


components:
  headers:
    X-Timestamp:
      description: timestamp - current time in Unix epoch format
      schema:
        type: string
        format: int64
      example: 1717106234
    SignatureRequest:
      description: Base64 encoded request signature. Created by signing the signature base string (combining HTTP method, URL, body and X-Timestamp header values) using RS256 algorithm, with private key of the client.
      schema:
        type: string
      example: RXhhbXBsZVJlc3BvbnNlU2lnbmF0dXJl
    SignatureResponse:
      description: Base64 encoded request signature. Created by signing the signature base string (combining HTTP method, URL, body and X-Timestamp header values) using RS256 algorithm, with private key of the server.
      schema:
        type: string
      example: RXhhbXBsZVJlc3BvbnNlU2lnbmF0dXJl



  schemas:
    client_assertion:
      type: string
      description: contains a signed JWT (JSON Web Token) according to RFC7519. Formatted as a string, consisting of three values joined together with "."
      example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6ImNlcnRpZmljYXRlX2NoYWluIn0.eyJpc3MiOiJjbGllbnRfaWQiLCJzdWIiOiJjbGllbnRfaWQiLCJhdWQiOiJzZXJ2ZXJfZG9tYWluL29hdXRoMi4wL3Rva2VuIiwianRpIjoicGVuc2lvbnNjaGVtZS5jbGllbnRpZC4xMjM0NTY3ODkiLCJleHAiOjE1MTYyNDI2MjIsImlhdCI6MTUxNjIzOTAyMn0.qNzTzxeNhmVH9NLsYKx2gtjKk83wLRgWqm_i8i0lUXUDTtxb-uzZnPN65u7z2idMl-zPUrC3OlAyjuCZnZkht0mlwYQpb_yVXQd-DNwkutBtRnqAZ-heUmAQ6cSH4-ghrsrO86m2E7DfLjjgnA0WWkZLwpKvd4Zoa1kWi0IGee-Wxb1rSy7lXxfLw4bPB5m4wl-b5atRqbb3wuRVr5M8RlCuhJSBlNsXeXjvp9Z-zfr5fHX8uc44VU4Vf_MaqiQbFW8ApZGEJbkNIwNSlGE1NFeZitQW0i6KcYWLWtpT-MgnlUVxs1ywEj2BG6s-_Fkk4NrfSCX2amC1IlGnZXUfJw
      properties:
        Header:
          description: base64 URL encoded value of client_assertion_jwtheader object
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6ImNlcnRpZmljYXRlX2NoYWluIn0
        Payload:
          description: base64 URL encoded value of client_assertion_jwtpayload object
          example: eyJpc3MiOiJjbGllbnRfaWQiLCJzdWIiOiJjbGllbnRfaWQiLCJhdWQiOiJzZXJ2ZXJfZG9tYWluL29hdXRoMi4wL3Rva2VuIiwianRpIjoicGVuc2lvbnNjaGVtZS5jbGllbnRpZC4xMjM0NTY3ODkiLCJleHAiOjE1MTYyNDI2MjIsImlhdCI6MTUxNjIzOTAyMn0
        Signature:
          description: base64 URL encoded value of signature created according to JSON Web Signature spec (RFC7515) following RS256 algorithm
          example: qNzTzxeNhmVH9NLsYKx2gtjKk83wLRgWqm_i8i0lUXUDTtxb-uzZnPN65u7z2idMl-zPUrC3OlAyjuCZnZkht0mlwYQpb_yVXQd-DNwkutBtRnqAZ-heUmAQ6cSH4-ghrsrO86m2E7DfLjjgnA0WWkZLwpKvd4Zoa1kWi0IGee-Wxb1rSy7lXxfLw4bPB5m4wl-b5atRqbb3wuRVr5M8RlCuhJSBlNsXeXjvp9Z-zfr5fHX8uc44VU4Vf_MaqiQbFW8ApZGEJbkNIwNSlGE1NFeZitQW0i6KcYWLWtpT-MgnlUVxs1ywEj2BG6s-_Fkk4NrfSCX2amC1IlGnZXUfJw
      required:
        - Header
        - Payload
        - Signature
    client_assertion_jwtheader:
      type: object
      properties:
        alg:
            type: string
            description: Specifies the cryptographic algorithm used for creating the signature. MUST be set to RS256
            example: RS256
        typ:
            type: string
            description: Specifies the token type. MUST be set to JWT
            example: JWT
        x5c:
            type: string
            description: Specifies (a chain of) certificates used for signing and optionally issuing certificates leading up to trusted root. MUST be formatted according to x5c specification in RFC7515.
            example: certificate_urlencoded_string
      required:
        - alg
        - typ
        - x5c
    client_assertion_jwtpayload:
      type: object
      properties:
        iss:
            type: string
            description: Specifies the JWT Issuer. Typically the same entity that is the authorised subject for accessing APIs, or their service provider. Should be set to same client_id in token request.
            example: client_id
        sub:
            type: string
            description: Specifies the subject of the client assertion. MUST be set to the entity that is authorised to make use of pensionscheme APIs. MUST be set to client_id in the token request.
            example: client_id
        aud:
            type: string
            description: Specifies the intended audience that validates the client_assertion. Should be set to the API token request endpoint or other server identifier.
            example: server_domain/oauth2.0/token
        jti:
            type: string
            description: Unique identifier of the client_assertion JWT. Formatting to be defined by the client.
            example: pensionscheme.clientid.123456789
        exp:
            type: integer
            description: Expiry time for JWT. MUST be formatted in unix epoch time and should be "iat" + 3600.
            example: 1675127056
        iat:
            type: integer
            description: Issued at time for JWT. MUST be formatted in unix epoch time and should be the exact moment of JWT creation by the client.
            example: 1675123456 
      required:
        - iss
        - sub
        - aud
        - jti
        - exp
        - iat
    certificateResponse:
      type: object
      description: response for certificate GET request. 
      properties:
        certificate:
          type: string
          description: Contains the server X.509 certificate in base64 encoded PEM format. Includes the '-----BEGIN CERTIFICATE-----' and '-----END CERTIFICATE-----' delimiters.
          example: -----BEGIN CERTIFICATE-----\nMIIDjDCCAnSgAwIBAgIUIJszbDZBoeDQE2XxTkz9S6UK6kAwDQYJKoZIhvcNAQELBQAwOjEUMBIGA1UECgwLZUlEQVMgUVRTUDEWMBQGA1UEAwwNZUlEQVMgUVRTUCBjYSBvYjAeFw0yNDA1MzAxMjAwMDBaFw0yNTA1MzAxMjAwMDBaMGIxGDAWBgNVBAoMD1BlbnNpb25zZXJ2aWNlczEfMB0GA1UECwwWUGVuc2lvbnNlcnZpY2VzIHBhcnRpY2lwYW50MRwwGgYDVQQDDBNQZW5zaW9uc2VydmljZXMgcGFydGljaXBhbnQgdW1teTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANdZtmQ0t9ibM0PPLR8IzFhFthcWcGvEYof0pVi4A4RsxfKMQd1UpW2TxPyAPIN35yxXE5hf2u1XthV2bb5CaQ2dsyu9AqU8/WiJk/jm+prKm0UhzZXYtDwMw1KzBrd1+k09v9hg5MmLphvv4ts2XtL5Oa1yYbZR6cUBjkSuOER2YsO5/62lgXtdSGHFT1UqIj7rWkqD9G3PExR8/UV7jYWtBoFoeqVJ4Pq6w0hM99ps8e1wbp2TpG7U1uHrVp2ZZzD8ZDL1G9TZGlf2ydXBDIf4dQJytj8VFtQHkY9zftPZk6k49xR+9eSbNSCxknSO+1o8V1zBNFFNML6TSNo+yz8CAwEAAaNTMFEwHQYDVR0OBBYEFJDmBXTceO3lVneQSuG7nh2yYH6GMB8GA1UdIwQYMBaAFJDmBXTceO3lVneQSuG7nh2yYH6GMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHyzPrULImoP03Hb5v3LRyWZWxn8XxsF1hbUqk5s/DOvtF8k4vBv7Q9L6F+1kMCsUgpOkaMbK/JeDAZnMwFBElNg07gZ9S/N7DzBo4BbQsTjVUK9Zx5tDsm1gkXWOpFHRG/9Zb7+lO5ptDNWw73sqRuj3W2/Ym04oZ+e2GpT8GTUgxxXxz+z0MO4gCQsC00fzG2u/jtwx4bm0DP3qE9+zB2E3xXWh8zP8FTb9zgOQxxG8kNRh8TXA0vVV8X6zxlboHgWuxbIFGFdvK15rrDJXn6n0GZJW+REXjRpYBBRV1bVozGsOEHZjiBAvdXYjF/nqKuMjK3SKudn1F8bsUYZMWE=\n-----END CERTIFICATE-----
      required:
        - certificate
    consentRegistration:
      type: object
      properties:
        consentStatus:
            $ref: '#/components/schemas/consentStatus'
        consentAssertion:
            $ref: '#/components/schemas/consentAssertion'
        consentScope:
            $ref: '#/components/schemas/consentScope'
        consentContext:
            $ref: '#/components/schemas/consentContext'
      required:
        - consentStatus
        - consentAssertion
        - consentScope
        - consentContext
    consentRegistrationPATCH:
      type: object
      properties:
        consentStatus:
            $ref: '#/components/schemas/consentStatus'
        consentAssertion:
            $ref: '#/components/schemas/consentAssertion'
        consentScope:
            $ref: '#/components/schemas/consentScope'
        consentContext:
            $ref: '#/components/schemas/consentContext'
    consentStatus:
      type: object
      description: describes consent status
      properties:
        clientConsentId:
            type: string
            description: Unique identifier of the consent for referencing consent resources that are stored client-side. Formatting to be decided by the client. Not to be confused with serverConsentId, which is a reference ID to consents that are stored server-side
            example: clientId.userId.123456
        approved:
            type: boolean
            description: Describes if consent is approved in true or false statement
            example: true
        consentType:
            type: string
            description: Specifies the type of consent. MUST be set to SINGLE-USE or RECURRING
            example: RECURRING
        maximumValidity:
            type: integer
            description: Optional property. In case of recurring consent type indicates the validity time of the consent in days
            example: 90
      required:
        - clientConsentId
        - approved
        - consentType
        - maximumValidity
    consentAssertion:
      type: object
      description: describes involved entities to the consent and issuing timestamp
      properties:
        issuer:
            type: string
            description: Specifies the JWT Issuer. Typically the same entity that is the authorised to act as "datadienst" and is responsible for retreiving consent, or their service provider. Should be set to same client_id in token request.
            example: client_id
        subject:
            type: string
            description: Specifies the subject of the client assertion. MUST be set to the BSN number of the individual that has provided consent. BSN value must only be shared as encrypted value using the public key of the server, obtained through the /server-certificate API call.
            example: KWe7$2O0A
        audience:
            type: string
            description: Specifies the intended audience that validates the client_assertion. Should be set to the API consent endpoint path or other server identifier.
            example: https://api.server_domain/pensioenservices-scheme/v1.0/deelnemers/consents
        expiresAt:
            type: integer
            description: Expiry time for consent. MUST be formatted in unix epoch time. For single-use consent it should be set to "iat" + 3600, for recurring consent it should be set to "iat" + the time that is specified for the pensionservice scope.
            example: 1675127056
        issuedAt:
            type: integer
            description: Issued at time for consent. MUST be formatted in unix epoch time and should be the exact moment of consent by the client.
            example: 1675123456
      required:
        - issuer
        - subject
        - audience
        - expiresAt
        - issuedAt
    consentScope:
      type: object
      description: describes for what service the consent was provided
      properties:
        pensionService:
            type: string
            description: Details the service for which consent is provided.
            example: DIVORCE_INFORM
      required:
        - pensionService
    consentContext:
      type: object
      description: describes details of what the user was seeing during consent provisioning and what policies are in force
      properties:
        privacyPolicyVersion:
            type: string
            description: Specifies the version number of the privacy policy in force in the client's channel during consent creation.
            example: 1.4.3
        termsVersion:
            type: string
            description: Specifies the version number of the terms & conditions in force in the client's channel during consent creation.
            example: 1.1.8
        url:
            type: string
            description: Specifies the domain the user was visiting when providing consent.
            example: server_domain/pensionservices/divorce_insight_tool
        explanatoryText:
            type: string
            description: Describes the main on-screen explanatory text that was shown to the user when providing consent.
            example: When you press 'accept' below, you consent to us collecting and processing your pensiondata for services related to providing insight into divorce. You also provide consent to your pensionprovider to make this data accesible for us.
        provisionMechanism:
            type: string
            description: Details the mechanism used for providing consent, such as an ticking an opt-in box or clicking a buttong with action text.
            example: Button with action text
        mechanismText:
            type: string
            description: Optional, describes the specific action text for consent, such as 'I agree', 'I accept' or 'agree and continue'.
            example: accept
      required:
        - privacyPolicyVersion
        - termsVersion
        - url
        - explanatoryText
        - provisionMechanism

    serverConsentId:
      type: string
      description: string containing a consent reference, identifying the consent resource that is stored server-side. Formatting to be defined by the server. Not to be confused with clientConsentId, which references a consent that is stored on client-side.
      example: serverId.userId.consent123456

    userInfoParameters:
      type: object
      properties:
        burgerServiceNummerEncrypted:
           description: provides the BSN number of the user for which personal data is requested. BSN number MUST be shared only as an encrypted value using the server's public key. The public key is retrieved using the server_certificate API call.
           example: KWe7$2O0A
        fondsId:
           description: provides the unique identifier of the pensionfund as expected data source. Commonly referred to as the U-code.
           example: U0202
      required:
      - burgerServiceNummerEncrypted
      - fondsId

    userInfo:
      type: object
      description: Object possibly containing a variety of data available about the user. Depending on requested scope only a subset of the following data is returned.
      properties:
        userInfoIdentifier:
            $ref: '#/components/schemas/userInfoIdentifier'
        userInfoProfile:
            $ref: '#/components/schemas/userInfoProfile'
        userInfoAddress:
            $ref: '#/components/schemas/userInfoAddress'
        userInfoContact:
            $ref: '#/components/schemas/userInfoContact'
        userInfoPensioen:
            $ref: '#/components/schemas/userInfoPension'
        userInfoPartnerProfile:
            $ref: '#/components/schemas/userInfoPartnerProfile'
        userInfoPartnerAddress:
            $ref: '#/components/schemas/userInfoAddress'
        userInfoPartnerContact:
            $ref: '#/components/schemas/userInfoContact'
    userInfoIdentifier:
      type: object
      properties:
        klantnummer:
          type: string
          description: subject, unique identifier of the user at the datasource
          example: 1234512344
        burgerServiceNummerEncrypted:
          type: string
          description: BSN number, unique identifier of the user in the Netherlands. MUST only be shared as an encrypted value using the server's private key. The receiving client can decrypt the bsn value using the public key retrieved via the server_certificate API call.
          example: M@a7R0$I;
    userInfoProfile:
      type: object
      properties:
        aanhef:
          type: string
          description: personal title of the user
          example: Dhr.
        initialen:
          type: string
          description: name initials followed by a '.'
          example: A.B.
        voornamen:
          type: string
          description: given name(s) or first name(s) of the user separated by spaces
          example: Jan
        achternaam:
          type: string
          description: surname(s) or last name(s) of the user, including optional prefix, separated by spaces
          example: de Boer
        voorkeursnaam:
          type: string
          description: optional alternative name preferred by the user if supported by the server, e.g. in case of marriage. Can also be the name that is commonly used by the datasource to address their participants, e.g. initials and family name.
          example: A.B. de Boer
        gender:
          type: string
          description: registered gender of the user
          example: Man
        geboortedatum:
          type: string
          description: birthdate of the user
          example: 1985-02-21
        verwantschapType:
          type: string
          description: describes the legal relationship status of the user. Can be one of the official or un-official terms. Official "GEHUWD", "GEREGISTREERD ALS PARTNER" or "ONGEHUWD EN NIET ALS PARTNER GEREGISTREERD". Un-official "GESCHEIDEN", "WEDUWNAAR", "GESCHEIDEN VAN TAFEL EN BED" or non-formal status such as "SAMENWONEND" or "FISCAAL PARTNER".
          example: GEHUWD
        relatieStart:
          type: string
          description: official starting date of the formal relation between user and partner, e.g. wedding date
          example: 2015-03-10
        relatieEind:
          type: string
          description: officiel ending date of the formal relation between user and partner, e.g
          example: 2023-08-22
        datumScheidingTafelenBed:
          type: string
          description: date of scheiding van tafel en bed
          example: 2022-01-01
        
    userInfoAddress:
      type: object
      properties:
        woonadres:
          type: string
          description: Full street address, may include house number, appartment number, street name, Post Office box number
          example: Hoofdweg 21a
        woonplaats:
          type: string
          description: City or locality component
          example: Amsterdam
        regio:
          type: string
          description: state, province, prefecture or region component
          example: Noord-Holland
        postcode:
          type: string
          description: Zip code or postal code component
          example: 1234AB
        land:
          type: string
          description: country name component
          example: Nederland
    userInfoContact:
      type: object
      properties:
        emailadres:
          type: string
          description: Preferred e-mail address of the user
          example: jandeboer@emailprovider.com
        telefoonnummer:
          type: string
          description: Preferred telephone number of the user including country prefix
          example: +31612345678
        bankrekeningnummer:
          type: string
          description: Preferred bankaccount (as IBAN)
          example: NL11RABO011111111
    userInfoPension:
      type: object
      properties:
        polisnummerRegeling:
          type: string
          description: contains reference number of the users pension agreement with a pensionfund
          example: 1234567890
        typeRegeling:
          type: string
          description: type of pension agreement. Can be 'UITKERINGSREGELING', 'PREMIEREGELING', 'KAPITAALREGELING'
          example: UITKERINGSREGELING
        looptijdRegeling:
          type: string
          description: duration of pension agreement. Can be 'TIJDELIJK', 'LEVENSLANG'
          example: LEVENSLANG
        regelingStartdatum:
          type: string
          description: starting date since the user became a participant with the pensionfund
          example: 2001-01-01
        regelingEinddatum:
          type: string
          description: optional enddate of the pension agreement, mainly relevant to temporary/flexible pensionn agreements
          example: 2008-01-01
        deelnemerStatus:
          type: string
          description: describes the current status of the user with the pensionfund. Can be 'ACTIEF', 'SLAPEND', 'GEPENSIONEERD'
          example: ACTIEF
    userInfoPartnerProfile:
      type: object
      properties:
        partnerKlantnummer:
          type: string
          description: optional unique identifier of the user's partner at the datasource (only if the partner also has a personal pension agreement with the same pensionfund)
          example: 1234512345
        aanhef:
          type: string
          description: personal title of the user's partner
          example: Mevr.
        initialen:
          type: string
          description: name initials followed by a '.'
          example: C.D.
        voornamen:
          type: string
          description: given name(s) or first name(s) of the user's partner separated by spaces
          example: Marie
        achternaam:
          type: string
          description: surname(s) or last name(s) of the user's partner separated by spaces
          example: van Gevelt
        voorkeursnaam:
          type: string
          description: optional alternative name preferred by the user's partner if supported by the server, e.g. in case of marriage. Can also be the name that the datasource commonly uses to address their participants.
          example: C.D. van Gevelt
        gender:
          type: string
          description: registered gender of the user's partner
          example: female
        geboortedatum:
          type: string
          description: birthdate of the user's partner
          example: 1987-08-25
        

    scheidingBerekeningParameters:
      type: object
      properties:
        burgerServiceNummerEncrypted:
           description: provides the BSN number of the user for which personal data is requested. BSN number MUST be shared only as an encrypted value using the server's public key. The public key is retrieved using the server_certificate API call.
           example: KWe7$2O0A
        fondsId:
           description: provides the unique identifier of the pensionfund as expected data source. Commonly referred to as the U-code.
           example: U0202
        berekeningPeriodeStart:
           description: defines the date that must be used by the server as starting point for calculation of pension accrual. If value is not provided then the formal relation startdate (e.g. marriage date) must be used that is known to the server.
           example: 2023-01-01
        berekeningPeriodeEinde:
           description: defines the date that must be used by the server as enddate for calculation of pension accrual. If the date is beyond current date then server can choose to estimate future values of pension accrual or provide error message that future dates are not supported. If value is not provided then the server needs to validate whether an enddate exists in pension adminstration (e.g. legal separation date), otherwise current today date must be used.
           example: 2023-01-07
        verdelingsPercentage:
           description: Should be percentage assigned to the person related to the BSN (e.g. the partner receives the 100 -/- this percentage. 
           type: number
           example: 50
        verdelingsMethode:
           description: Can be either 'VEREVENING' or 'CONVERSIE'.
           example: VEREVENING
        acceptatieBijzonderPartnerPensioen:
           description: Only applicable if verdelingsMethode is not CONVERSIE. Indicates whether ex-partner is accepting their allocated 'Bijzonder Partner Pensioen' (BPP) if applicable. True indicates that partner accepts the allocated BPP, which then needs to be considered in conversion calculations. False indicates partner is declining their right to BPP. When CONVERSIE is chosen, the (B)PP is converted into the ouderdomspensioen of the ex-partner.
           type: boolean
           example: true
      required:
        - burgerServiceNummerEncrypted
        - fondsId
        - berekeningPeriodeStart
        - verdelingsPercentage
        - verdelingsMethode 

    scheidingBerekeningResultaat:
        type: object
        description: Contains all calculation results. Response contains objects depending on the type of pension agreement. Response MAY be returned as an array where the result is repeated, in case the participant has multiple pension agreements at the same time with a pension provider. 
        properties:
          pensioenRegeling:
            $ref: '#/components/schemas/pensioenRegeling'
          aanspraak:
            $ref: '#/components/schemas/aanspraak'
          aanspraakPartner:
            $ref: '#/components/schemas/aanspraakPartner'
          # aanspraakOuderdomspensioen:
          #   $ref: '#/components/schemas/aanspraakOuderdomspensioen'
          # aanspraakOuderdomspensioenPartner:
          #   $ref: '#/components/schemas/aanspraakOuderdomspensioenPartner'
          # aanspraakTijdelijkPensioen:
          #   $ref: '#/components/schemas/aanspraakTijdelijkPensioen'
          # aanspraakTijdelijkPensioenPartner:
          #   $ref: '#/components/schemas/aanspraakTijdelijkPensioenPartner'
          # aanspraakBijzonderPartnerPensioen:
          #   $ref: '#/components/schemas/aanspraakBijzonderPartnerPensioen'
        required:
          - pensioenRegeling
          - aanspraak
          - aanspraakPartner

    pensioenRegeling:
      type: object
      properties:
        polisnummerRegeling:
          type: string
          description: contains reference number of the users pension agreement with a pensionfund
          example: 1234567890
        typeRegeling:
          type: string
          description: type of pension agreement. Can be 'UITKERINGSREGELING', 'PREMIEREGELING', 'KAPITAALREGELING'
          example: UITKERINGSREGELING
        looptijdRegeling:
          type: string
          description: duration of pension agreement. Can be 'TIJDELIJK' for temperory pensions, 'LEVENSLANG' for ouderdomspensioenen or 'PARTNERPENSIOEN' for (B)PP
          example: LEVENSLANG
        regelingStartdatum:
          type: string
          description: starting date since the user became a participant with the pensionfund
          example: 2001-01-01
        regelingEinddatum:
          type: string
          description: optional enddate of the pension agreement, mainly relevant to temporary/flexible pensionn agreements
          example: 2008-01-01
        deelnemerStatus:
          type: string
          description: describes the current status of the user with the pensionfund. Can be 'ACTIEF', 'SLAPEND', 'GEPENSIONEERD'
          example: ACTIEF
      required:
        - polisnummerRegeling
        - typeRegeling
        - looptijdRegeling
        - regelingStartdatum
        - deelnemerStatus
    aanspraak:
      type: object
      description: object for the user's part of pension. Required for OP/TP, not present in case of BPP.
      properties:
        maandbedragVoor:
          type: number
          description: Expected monthly pension entitlement (EUR) before division of pension due to divorce.
          example: 2000
        maandbedragNa:
          type: number
          description: Expected monthly pension entitlement (EUR) after division of pension due to divorce based on request parameters.
          example: 1000
        maandbedragVoorHogerDanAfkoopgrens:
          type: boolean
          description: Indicates whether entitlement meets legal minimum for division of pension (indepedent of division). Entitlements falling below the division limit cannot be divided. Must be either True (division limit is met) or False (division limit is not met). Not used for BPP.
          example: true
      required:
        - maandbedragVoor
        - maandbedragNa
    aanspraakPartner:
      type: object
      description: object for the user's part of pension. Required for OP, TP and BPP.
      properties:
        maandbedragVoor:
          type: number
          description: Partner's expected monthly pension entitlement (EUR) before division of pension due to divorce.
          example: 0
        maandbedragNa:
          type: number
          description: Partner's expected monthly pension entitlement (EUR) after division of pension due to divorce based on request parameters. In case of conversion + tijdelijk pensioen, this is expected to be zero.
          example: 1000
        maandbedragNaHogerDanAfkoopgrens:
          type: boolean
          description: Indicates whether resulting entitlement (based on division) meets legal minimum for division of pension. Entitlements divisions where the ex-partner's share is below the division limit cannot be divided.  Must be either true (division limit is met) or false (division limit is not met). Not used for BPP.
          example: true
      required:
        - maandbedragVoor
        - maandbedragNa
    # aanspraakOuderdomspensioen:
    #   type: object
    #   description: optional object, MUST be used if the duration of the pension agreement type is set to "levenslang" (life long, old age agreement)
    #   properties:
    #     maandbedragVoor:
    #       type: number
    #       description: Expected monthly old age pension entitlement (EUR) before division of pension due to divorce.
    #       example: 2000
    #     maandbedragNa:
    #       type: number
    #       description: Expected monthly old age pension entitlement (EUR) after division of pension due to divorce based on request parameters.
    #       example: 1000
    #     maandbedragVoorHogerDanAfkoopgrens:
    #       type: boolean
    #       description: Indicates whether entitlement meets legal minimum for division of pension (indepedent of division). Entitlements falling below the division limit cannot be divided. Must be either True (division limit is met) or False (division limit is not met).
    #       example: true
    #   required:
    #     - maandbedragVoor
    #     - maandbedragNa
    #     - maandbedragVoorHogerDanAfkoopgrens
    # aanspraakOuderdomspensioenPartner:
    #   type: object
    #   description: optional object, MUST be used if the duration of the pension agreement type is set to "levenslang" (life long, old age agreement)
    #   properties:
    #     maandbedragVoor:
    #       type: number
    #       description: Partner's expected monthly old age pension entitlement (EUR) before division of pension due to divorce.
    #       example: 0
    #     maandbedragNa:
    #       type: number
    #       description: Partner's expected monthly old age pension entitlement (EUR) after division of pension due to divorce based on request parameters.
    #       example: 1000
    #     maandbedragNaHogerDanAfkoopgrens:
    #       type: boolean
    #       description: Indicates whether resulting entitlement (based on division) meets legal minimum for division of pension. Entitlements divisions where the ex-partner's share is below the division limit cannot be divided.  Must be either true (division limit is met) or false (division limit is not met).
    #       example: true
    #   required:
    #     - maandbedragVoor
    #     - maandbedragNa
    #     - maandbedragNaHogerDanAfkoopgrens
    # aanspraakTijdelijkPensioen:
    #   type: object
    #   description: optional object, MUST be used if the duration of the pension agreement type is set to "tijdelijk" (temporary, flexible pension agreement)
    #   properties:
    #     maandbedragVoor:
    #       type: number
    #       description: Expected monthly flexible pension entitlement (EUR) before division of pension due to divorce, during the timeframe indicated in the pension agreement startdate and enddate.
    #       example: 0
    #     maandbedragNa:
    #       type: number
    #       description: Expected monthly flexible pension entitlement (EUR) after division of pension due to divorce based on request parameters, during the timeframe indicated in the pension agreement startdate and enddate.
    #       example: 1000
    #     maandbedragVoorHogerDanAfkoopgrens:
    #       type: boolean
    #       description: Indicates whether entitlement meets legal minimum for division of pension (indepedent of division). Entitlements falling below the division limit cannot be divided. Must be either True (division limit is met) or False (division limit is not met).
    #       example: True
    #   required:
    #     - maandbedragVoor
    #     - maandbedragNa
    #     - maandbedragVoorHogerDanAfkoopgrens
    # aanspraakTijdelijkPensioenPartner:
    #   type: object
    #   description: optional object, MUST be used if the duration of the pension agreement type is set to "tijdelijk" (temporary, flexible pension agreement)
    #   properties:
    #     maandbedragVoor:
    #       type: number
    #       description: Partner's expected monthly flexible pension entitlement (EUR) before division of pension due to divorce, during the timeframe indicated in the pension agreement startdate and enddate.
    #       example: 0
    #     maandbedragNa:
    #       type: number
    #       description: Partner's expected monthly flexible pension entitlement (EUR) after division of pension due to divorce based on request parameters, during the timeframe indicated in the pension agreement startdate and enddate.
    #       example: 1000
    #     maandbedragNaHogerDanAfkoopgrens:
    #       type: boolean
    #       description: Indicates whether resulting entitlement (based on division) meets legal minimum for division of pension. Entitlements divisions where the ex-partner's share is below the division limit cannot be divided.  Must be either true (division limit is met) or false (division limit is not met).
    #       example: true
    #   required:
    #     - maandbedragVoor
    #     - maandbedragNa
    #     - maandbedragNaHogerDanAfkoopgrens
    # aanspraakBijzonderPartnerPensioen:
    #   type: object
    #   properties:
    #     maandBedragVoor:
    #       type: number
    #       description: Current accrual of Bijzonder Partner Pensioen (BPP) as a reservation for the partner in case when the participant passes away.
    #       example: 800
    #     maandBedragNa:
    #       type: number
    #       description: Accrued BPP after applying divorce division parameters. Remains the same in case of declined BPP acceptance or accepted with VEREVENING method. Is reset to 0 when BPP is accepted by the ex-partner and conversion is applied.
    #       example: 800
    #   required:
    #     - maandBedragVoor
    #     - maandBedragNa



  examples:
    pensioenOuderdomExample:
      summary: Only Ouderdomspensioen example
      value:
        - pensioenRegeling:
            polisnummerRegeling: "1234567890"
            typeRegeling: "UITKERINGSREGELING"
            looptijdRegeling: "LEVENSLANG"
            regelingStartdatum: "2001-01-01"
            deelnemerStatus: "ACTIEF"
          aanspraak:
            maandbedragVoor: 2000
            maandbedragNa: 1000
            maandbedragVoorHogerDanAfkoopgrens: true
          aanspraakPartner:
            maandbedragVoor: 0
            maandbedragNa: 1000
            maandbedragNaHogerDanAfkoopgrens: true

    pensioenTijdelijkExample:
      summary: Only Tijdelijk Pensioen example
      value:
        - pensioenRegeling:
            polisnummerRegeling: "2345678901"
            typeRegeling: "PREMIEREGELING"
            looptijdRegeling: "TIJDELIJK"
            regelingStartdatum: "2005-01-01"
            regelingEinddatum: "2015-01-01"
            deelnemerStatus: "SLAPEND"
          aanspraak:
            maandbedragVoor: 2000
            maandbedragNa: 1000
            maandbedragVoorHogerDanAfkoopgrens: true
          aanspraakPartner:
            maandbedragVoor: 0
            maandbedragNa: 1000
            maandbedragNaHogerDanAfkoopgrens: true

    combinedExample:
      summary: Combined example (Ouderdoms+Tijdelijk)
      value:
        - pensioenRegeling:
            polisnummerRegeling: "3456789012"
            typeRegeling: "UITKERINGSREGELING"
            looptijdRegeling: "LEVENSLANG"
            regelingStartdatum: "2010-01-01"
            deelnemerStatus: "ACTIEF"
          aanspraak:
            maandbedragVoor: 3000
            maandbedragNa: 1500
            maandbedragVoorHogerDanAfkoopgrens: true
          aanspraakPartner:
            maandbedragVoor: 0
            maandbedragNa: 1500
            maandbedragNaHogerDanAfkoopgrens: true
        - pensioenRegeling:
            polisnummerRegeling: "4567890123"
            typeRegeling: "UITKERINGSREGELING"
            looptijdRegeling: "TIJDELIJK"
            regelingStartdatum: "2010-01-01"
            regelingEinddatum: "2030-01-01"
            deelnemerStatus: "ACTIEF"
          aanspraak:
            maandbedragVoor: 4000
            maandbedragNa: 400
            maandbedragVoorHogerDanAfkoopgrens: true
          aanspraakPartner:
            maandbedragVoor: 0
            maandbedragNa: 3600
            maandbedragNaHogerDanAfkoopgrens: true
    afkoopgrensExample:
      summary: Ouderdomspensioen afkoopgrens example
      value:
        - pensioenRegeling:
            polisnummerRegeling: "1234567890"
            typeRegeling: "UITKERINGSREGELING"
            looptijdRegeling: "LEVENSLANG"
            regelingStartdatum: "2001-01-01"
            deelnemerStatus: "ACTIEF"
          aanspraak:
            maandbedragVoor: 2000
            maandbedragNa: 2000
            maandbedragVoorHogerDanAfkoopgrens: true
          aanspraakPartner:
            maandbedragVoor: 0
            maandbedragNa: 0
            maandbedragNaHogerDanAfkoopgrens: false
    BPPExample:
      summary: BPP example (only possible for Conversion)
      value:
        - pensioenRegeling:
            polisnummerRegeling: "1234567890"
            typeRegeling: "UITKERINGSREGELING"
            looptijdRegeling: "LEVENSLANG"
            regelingStartdatum: "2001-01-01"
            deelnemerStatus: "ACTIEF"
          aanspraak:
            maandbedragVoor: 2000
            maandbedragNa: 2000
            maandbedragVoorHogerDanAfkoopgrens: true
          aanspraakPartner:
            maandbedragVoor: 0
            maandbedragNa: 0
            maandbedragNaHogerDanAfkoopgrens: false
        - pensioenRegeling:
            polisnummerRegeling: "6789012345"
            typeRegeling: "UITKERINGSREGELING"
            looptijdRegeling: "PARTNERPENSIOEN"
            regelingStartdatum: "2001-01-01"
            deelnemerStatus: "ACTIEF"
          aanspraak:
            maandbedragVoor: 0
            maandbedragNa: 0
          aanspraakPartner:
            maandbedragVoor: 600
            maandbedragNa: 500


  securitySchemes:
    auth:
      type: oauth2
      description: |
        This API uses OAuth 2.0 Client Credentials flow for authentication.
        Clients must obtain a Bearer token from the token endpoint using a client assertion (see /token for details).
      flows:
        clientCredentials:
          tokenUrl: https://api.example.com/pensioenservices-scheme/v1.0/token
          scopes:
            afsprakenstelsel_pensioenservices: Access pension services